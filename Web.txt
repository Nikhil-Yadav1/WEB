Alignment :
    
    [HTML]
        align -> left right top bottom center
    [CSS]
        vertical-align -> top text-top middle text-bottom bottom baseline[default] super sub Value[pixels or percentage]
        text-indent -> Value in Pixels,etc.
        float -> left right
        margin
        padding
        text-align -> left center right
        position -> static relative->{top bottom left right} absolute fixed sticky
        [FLEX]
            justify-content -> center space-between space-evenly space-around left right
            align-content -> center space-between space-evenly space-around start end flex-start flex-end
                 end baseline
            align-self -> auto start self-start flex-start center normal self-end flex-end end baseline {Items}
            align-items -> auto start self-start flex-start center normal self-end flex-end end baseline {Container}
            place-items -> flex-start center flex-end {SHORTHAND FOR BOTH SELF}
        [GRID]
            justify-items -> start center end stretch
            align-items -> start center end stretch
            justify-content -> start center end stretch space-between space-around space-evenly
            align-content -> start center end stretch space-between space-around space-evenly
            justify-self -> start center end stretch
            align-self -> start center end stretch

    position: static;
It is the default position of HTML elements.

    position: relative;
It is used when we need to position an HTML element relative to its normal position.
We can set the top, right, bottom, and left properties that will cause the element to adjust away from the
normal position
    
    position: absolute;
An element with the absolute position will move according to the position of its parent element.
In the absence of any parent element, the HTML element will be placed relative to the page

    position: fixed;
An element with position:fixed; will remain stuck to a specific position even after the page is scrolled.
This position property is used when we want to keep an HTML element at a fixed spot no matter where on the page
the user is.
    
    position: sticky;
It is a hybrid of relative and fixed position.
An HTML element with position:sticky; will just sit there until a given position offset is met.


Border comes inside the box, Outline goes out of the box


There are multiple ways to align text in HTML and CSS, depending on the context and the desired effect. 
Here are some of the common methods:

- Using the `text-align` property: This property specifies the horizontal alignment of the text within a 
block-level element, such as a `<p>` or a `<div>`. The possible values are `left`, `right`, `center`, 
`justify`, and `inherit`. For example, to center the text within a paragraph, you can use the following code:

```html
<p style="text-align: center;">This is a centered paragraph.</p>
```

- Using the `vertical-align` property: This property specifies the vertical alignment of the text within a 
    line box, such as a `<span>` or an `<img>`. The possible values are `baseline`, `sub`, `super`, `top`, 
    `text-top`, `middle`, `bottom`, `text-bottom`, and `inherit`. For example, to align the text to the 
    bottom of an image, you can use the following code:

```html
<img src="image.jpg" alt="Image" style="vertical-align: bottom;">
<span>This is a text aligned to the bottom of the image.</span>
```

- Using the `margin` property: This property specifies the space around an element, which can affect its 
position and alignment. The possible values are a length, a percentage, `auto`, or `inherit`. You can 
specify the margin for each side of the element using `margin-top`, `margin-right`, `margin-bottom`, and 
`margin-left`, or use a shorthand notation with one, two, three, or four values. For example, to center 
an element horizontally, you can use the following code:

```html
<div style="width: 300px; margin: 0 auto;">This is a centered element.</div>
```

- Using the `flex` layout: This is a modern CSS layout module that allows you to create flexible and 
    responsive layouts. You can use the `display: flex` property to create a flex container, and then use 
    various properties to align the flex items within it. Some of the properties are `flex-direction`, 
    `flex-wrap`, `flex-flow`, `justify-content`, `align-items`, `align-content`, and `align-self`. For 
    example, to create a row of three items that are evenly spaced and vertically centered, you can use the 
    following code:

```html
<div style="display: flex; justify-content: space-between; align-items: center;">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
</div>
```

- Using the `grid` layout: This is another modern CSS layout module that allows you to create 
    two-dimensional grid-based layouts. You can use the `display: grid` property to create a grid container, 
    and then use various properties to define the grid rows, columns, areas, and gaps. Some of the properties 
    are `grid-template-columns`, `grid-template-rows`, `grid-template-areas`, `grid-auto-columns`, 
    `grid-auto-rows`, `grid-auto-flow`, `grid-column-start`, `grid-column-end`, `grid-row-start`, 
    `grid-row-end`, `grid-column`, `grid-row`, `grid-area`, and `grid`. You can also use the `justify-items`,
    `align-items`, `justify-content`, `align-content`, `justify-self`, and `align-self` properties to align 
    the grid items within the grid cells. For example, to create a grid of four items that span two columns 
    and two rows, and are centered within the grid, you can use the following code:

```html
<div style="display: grid; grid-template-columns: repeat(2, 1fr); grid-template-rows: repeat(2, 1fr); 
    justify-items: center; align-items: center;">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
  <div>Item 4</div>
</div>
```

These are some of the methods to align text in HTML and CSS, but there are more ways to achieve different 
effects.

There are many CSS properties that work with grid and flex layouts, but some of them are specific to one or 
    the other. Here is a list of some of the properties that work with grid and flex, and some that don't:

Properties that work with both grid and flex:

- display: This property defines the display type of the element, such as grid or flex.
- align-items: This property aligns the items along the cross axis of the container.
- align-content: This property aligns the lines of items along the cross axis of the container when there 
    is extra space.
- align-self: This property aligns an individual item along the cross axis of the container.
- justify-items: This property aligns the items along the main axis of the container.
- justify-content: This property aligns the lines of items along the main axis of the container when there 
    is extra space.
- justify-self: This property aligns an individual item along the main axis of the container.
- order: This property specifies the order of the items within the container.
- gap: This property specifies the size of the gaps between the items or the lines of items.

Properties that work only with grid:

- grid-template-columns: This property defines the size and number of columns in the grid layout.
- grid-template-rows: This property defines the size and number of rows in the grid layout.
- grid-template-areas: This property defines the areas of the grid layout using named items.
- grid-auto-columns: This property defines the size of the columns for the auto-placed items in the grid layout.
- grid-auto-rows: This property defines the size of the rows for the auto-placed items in the grid layout.
- grid-auto-flow: This property defines how the auto-placed items are placed in the grid layout.
- grid-column-start: This property specifies the start line of a grid item along the grid column axis.
- grid-column-end: This property specifies the end line of a grid item along the grid column axis.
- grid-row-start: This property specifies the start line of a grid item along the grid row axis.
- grid-row-end: This property specifies the end line of a grid item along the grid row axis.
- grid-column: This property is a shorthand for grid-column-start and grid-column-end.
- grid-row: This property is a shorthand for grid-row-start and grid-row-end.
- grid-area: This property is a shorthand for grid-row-start, grid-column-start, grid-row-end, and grid-column-end, or a name of a grid area.
- grid: This property is a shorthand for grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and grid-auto-flow.

Properties that work only with flex:

- flex-direction: This property defines the direction of the main axis of the flex container, such as row or column.
- flex-wrap: This property defines whether the flex items wrap onto multiple lines or not.
- flex-flow: This property is a shorthand for flex-direction and flex-wrap.
- flex-grow: This property specifies how much a flex item will grow relative to the rest of the flex items.
- flex-shrink: This property specifies how much a flex item will shrink relative to the rest of the flex items.
- flex-basis: This property specifies the initial size of a flex item before any adjustments.
- flex: This property is a shorthand for flex-grow, flex-shrink, and flex-basis.

